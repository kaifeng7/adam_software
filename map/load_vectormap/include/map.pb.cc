// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fmap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Arc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConnectionLaneLink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneWidth;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Line;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoadLinker;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoadMark;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Connection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Junction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneSection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneSet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Lanes;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlainView;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadLink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Geometry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Road;
}  // namespace protobuf_proto_2fmap_2eproto
namespace adam {
namespace map {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class GeometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Geometry>
      _instance;
  const ::adam::map::Line* line_;
  const ::adam::map::Arc* arc_;
} _Geometry_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Line>
      _instance;
} _Line_default_instance_;
class ArcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Arc>
      _instance;
} _Arc_default_instance_;
class PlainViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlainView>
      _instance;
} _PlainView_default_instance_;
class LanesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lanes>
      _instance;
} _Lanes_default_instance_;
class LaneSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSet>
      _instance;
} _LaneSet_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class RoadMarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadMark>
      _instance;
} _RoadMark_default_instance_;
class LaneWidthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneWidth>
      _instance;
} _LaneWidth_default_instance_;
class LaneSectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSection>
      _instance;
} _LaneSection_default_instance_;
class JunctionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Junction>
      _instance;
} _Junction_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Connection>
      _instance;
} _Connection_default_instance_;
class ConnectionLaneLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionLaneLink>
      _instance;
} _ConnectionLaneLink_default_instance_;
class RoadLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadLink>
      _instance;
} _RoadLink_default_instance_;
class RoadLinkerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadLinker>
      _instance;
} _RoadLinker_default_instance_;
class RoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Road>
      _instance;
} _Road_default_instance_;
class ADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<A>
      _instance;
} _A_default_instance_;
class BDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<B>
      _instance;
} _B_default_instance_;
class MapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Map>
      _instance;
} _Map_default_instance_;
}  // namespace map
}  // namespace adam
namespace protobuf_proto_2fmap_2eproto {
static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Header_default_instance_;
    new (ptr) ::adam::map::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsGeometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Geometry_default_instance_;
    new (ptr) ::adam::map::Geometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Geometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Geometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGeometry}, {
      &protobuf_proto_2fmap_2eproto::scc_info_Line.base,
      &protobuf_proto_2fmap_2eproto::scc_info_Arc.base,}};

static void InitDefaultsLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Line_default_instance_;
    new (ptr) ::adam::map::Line();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Line::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Line =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLine}, {}};

static void InitDefaultsArc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Arc_default_instance_;
    new (ptr) ::adam::map::Arc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Arc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Arc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArc}, {}};

static void InitDefaultsPlainView() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_PlainView_default_instance_;
    new (ptr) ::adam::map::PlainView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::PlainView::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlainView =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlainView}, {
      &protobuf_proto_2fmap_2eproto::scc_info_Geometry.base,}};

static void InitDefaultsLanes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Lanes_default_instance_;
    new (ptr) ::adam::map::Lanes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Lanes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Lanes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLanes}, {
      &protobuf_proto_2fmap_2eproto::scc_info_LaneSection.base,}};

static void InitDefaultsLaneSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_LaneSet_default_instance_;
    new (ptr) ::adam::map::LaneSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::LaneSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneSet}, {
      &protobuf_proto_2fmap_2eproto::scc_info_Lane.base,}};

static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Lane_default_instance_;
    new (ptr) ::adam::map::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLane}, {
      &protobuf_proto_2fmap_2eproto::scc_info_LaneWidth.base,
      &protobuf_proto_2fmap_2eproto::scc_info_RoadMark.base,}};

static void InitDefaultsRoadMark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_RoadMark_default_instance_;
    new (ptr) ::adam::map::RoadMark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::RoadMark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoadMark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoadMark}, {}};

static void InitDefaultsLaneWidth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_LaneWidth_default_instance_;
    new (ptr) ::adam::map::LaneWidth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::LaneWidth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneWidth =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneWidth}, {}};

static void InitDefaultsLaneSection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_LaneSection_default_instance_;
    new (ptr) ::adam::map::LaneSection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::LaneSection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneSection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneSection}, {
      &protobuf_proto_2fmap_2eproto::scc_info_LaneSet.base,}};

static void InitDefaultsJunction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Junction_default_instance_;
    new (ptr) ::adam::map::Junction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Junction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Junction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJunction}, {
      &protobuf_proto_2fmap_2eproto::scc_info_Connection.base,}};

static void InitDefaultsConnection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Connection_default_instance_;
    new (ptr) ::adam::map::Connection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Connection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Connection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConnection}, {
      &protobuf_proto_2fmap_2eproto::scc_info_ConnectionLaneLink.base,}};

static void InitDefaultsConnectionLaneLink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_ConnectionLaneLink_default_instance_;
    new (ptr) ::adam::map::ConnectionLaneLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::ConnectionLaneLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectionLaneLink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectionLaneLink}, {}};

static void InitDefaultsRoadLink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_RoadLink_default_instance_;
    new (ptr) ::adam::map::RoadLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::RoadLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadLink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadLink}, {
      &protobuf_proto_2fmap_2eproto::scc_info_RoadLinker.base,}};

static void InitDefaultsRoadLinker() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_RoadLinker_default_instance_;
    new (ptr) ::adam::map::RoadLinker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::RoadLinker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoadLinker =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoadLinker}, {}};

static void InitDefaultsRoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Road_default_instance_;
    new (ptr) ::adam::map::Road();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Road::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Road =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRoad}, {
      &protobuf_proto_2fmap_2eproto::scc_info_RoadLink.base,
      &protobuf_proto_2fmap_2eproto::scc_info_PlainView.base,
      &protobuf_proto_2fmap_2eproto::scc_info_Lanes.base,}};

static void InitDefaultsA() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_A_default_instance_;
    new (ptr) ::adam::map::A();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::A::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_A =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsA}, {}};

static void InitDefaultsB() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_B_default_instance_;
    new (ptr) ::adam::map::B();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::B::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_B =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsB}, {}};

static void InitDefaultsMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adam::map::_Map_default_instance_;
    new (ptr) ::adam::map::Map();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adam::map::Map::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Map =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMap}, {
      &protobuf_proto_2fmap_2eproto::scc_info_Header.base,
      &protobuf_proto_2fmap_2eproto::scc_info_Road.base,
      &protobuf_proto_2fmap_2eproto::scc_info_Junction.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Geometry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Line.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Arc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlainView.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lanes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadMark.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneWidth.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Junction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Connection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectionLaneLink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadLink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadLinker.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Road.base);
  ::google::protobuf::internal::InitSCC(&scc_info_A.base);
  ::google::protobuf::internal::InitSCC(&scc_info_B.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Map.base);
}

::google::protobuf::Metadata file_level_metadata[20];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Header, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Header, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, hdg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, length_),
  offsetof(::adam::map::GeometryDefaultTypeInternal, line_),
  offsetof(::adam::map::GeometryDefaultTypeInternal, arc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Geometry, shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Arc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Arc, curvature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::PlainView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::PlainView, geometry_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Lanes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Lanes, lane_section_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneSet, lane_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Lane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Lane, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Lane, road_mark_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadMark, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadMark, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadMark, width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneWidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneWidth, s_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneWidth, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneWidth, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneWidth, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneWidth, d_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneSection, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneSection, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneSection, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::LaneSection, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Junction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Junction, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Junction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Junction, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Connection, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Connection, incoming_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Connection, connecting_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Connection, contact_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Connection, lane_link_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::ConnectionLaneLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::ConnectionLaneLink, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::ConnectionLaneLink, to_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadLink, predecessor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadLink, successor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadLinker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadLinker, element_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadLinker, element_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::RoadLinker, contact_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Road, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Road, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Road, link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Road, plain_view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Road, lanes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::A, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::B, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::B, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Map, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Map, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::adam::map::Map, junction_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::adam::map::Header)},
  { 8, -1, sizeof(::adam::map::Geometry)},
  { 21, -1, sizeof(::adam::map::Line)},
  { 26, -1, sizeof(::adam::map::Arc)},
  { 32, -1, sizeof(::adam::map::PlainView)},
  { 38, -1, sizeof(::adam::map::Lanes)},
  { 44, -1, sizeof(::adam::map::LaneSet)},
  { 50, -1, sizeof(::adam::map::Lane)},
  { 58, -1, sizeof(::adam::map::RoadMark)},
  { 66, -1, sizeof(::adam::map::LaneWidth)},
  { 76, -1, sizeof(::adam::map::LaneSection)},
  { 85, -1, sizeof(::adam::map::Junction)},
  { 93, -1, sizeof(::adam::map::Connection)},
  { 103, -1, sizeof(::adam::map::ConnectionLaneLink)},
  { 110, -1, sizeof(::adam::map::RoadLink)},
  { 117, -1, sizeof(::adam::map::RoadLinker)},
  { 125, -1, sizeof(::adam::map::Road)},
  { 135, -1, sizeof(::adam::map::A)},
  { 140, -1, sizeof(::adam::map::B)},
  { 146, -1, sizeof(::adam::map::Map)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Geometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Arc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_PlainView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Lanes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_LaneSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_RoadMark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_LaneWidth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_LaneSection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Junction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_ConnectionLaneLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_RoadLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_RoadLinker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Road_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_A_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_B_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::adam::map::_Map_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/map.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017proto/map.proto\022\010adam.map\"5\n\006Header\022\017\n"
      "\007version\030\003 \001(\002\022\014\n\004name\030\004 \001(\t\022\014\n\004date\030\005 \001"
      "(\t\"\217\001\n\010Geometry\022\t\n\001s\030\001 \001(\001\022\t\n\001x\030\002 \001(\001\022\t\n"
      "\001y\030\003 \001(\001\022\013\n\003hdg\030\004 \001(\001\022\016\n\006length\030\005 \001(\001\022\036\n"
      "\004line\030\006 \001(\0132\016.adam.map.LineH\000\022\034\n\003arc\030\007 \001"
      "(\0132\r.adam.map.ArcH\000B\007\n\005shape\"\006\n\004Line\"\030\n\003"
      "Arc\022\021\n\tcurvature\030\001 \001(\001\"1\n\tPlainView\022$\n\010g"
      "eometry\030\001 \003(\0132\022.adam.map.Geometry\"4\n\005Lan"
      "es\022+\n\014lane_section\030\001 \001(\0132\025.adam.map.Lane"
      "Section\"\'\n\007LaneSet\022\034\n\004lane\030\001 \003(\0132\016.adam."
      "map.Lane\"]\n\004Lane\022\n\n\002id\030\001 \001(\005\022\"\n\005width\030\004 "
      "\001(\0132\023.adam.map.LaneWidth\022%\n\troad_mark\030\005 "
      "\003(\0132\022.adam.map.RoadMark\"6\n\010RoadMark\022\014\n\004t"
      "ype\030\002 \001(\t\022\r\n\005color\030\004 \001(\t\022\r\n\005width\030\006 \001(\001\""
      "I\n\tLaneWidth\022\020\n\010s_offset\030\001 \001(\001\022\t\n\001a\030\002 \001("
      "\001\022\t\n\001b\030\003 \001(\001\022\t\n\001c\030\004 \001(\001\022\t\n\001d\030\005 \001(\001\"~\n\013La"
      "neSection\022\t\n\001s\030\001 \001(\001\022\037\n\004left\030\002 \001(\0132\021.ada"
      "m.map.LaneSet\022!\n\006center\030\003 \001(\0132\021.adam.map"
      ".LaneSet\022 \n\005right\030\004 \001(\0132\021.adam.map.LaneS"
      "et\"N\n\010Junction\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\t"
      "\022(\n\nconnection\030\003 \003(\0132\024.adam.map.Connecti"
      "on\"\220\001\n\nConnection\022\n\n\002id\030\001 \001(\t\022\025\n\rincomin"
      "g_road\030\002 \001(\t\022\027\n\017connecting_road\030\003 \001(\t\022\025\n"
      "\rcontact_point\030\004 \001(\t\022/\n\tlane_link\030\005 \003(\0132"
      "\034.adam.map.ConnectionLaneLink\".\n\022Connect"
      "ionLaneLink\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\"^\n"
      "\010RoadLink\022)\n\013predecessor\030\001 \001(\0132\024.adam.ma"
      "p.RoadLinker\022\'\n\tsuccessor\030\002 \001(\0132\024.adam.m"
      "ap.RoadLinker\"M\n\nRoadLinker\022\024\n\014element_t"
      "ype\030\001 \001(\t\022\022\n\nelement_id\030\002 \001(\t\022\025\n\rcontact"
      "_point\030\003 \001(\t\"\213\001\n\004Road\022\014\n\004name\030\001 \001(\t\022\n\n\002i"
      "d\030\003 \001(\t\022 \n\004link\030\005 \001(\0132\022.adam.map.RoadLin"
      "k\022\'\n\nplain_view\030\006 \001(\0132\023.adam.map.PlainVi"
      "ew\022\036\n\005lanes\030\t \003(\0132\017.adam.map.Lanes\"\003\n\001A\""
      "\021\n\001B\022\014\n\004name\030\001 \001(\t\"k\n\003Map\022 \n\006header\030\001 \001("
      "\0132\020.adam.map.Header\022\034\n\004road\030\002 \003(\0132\016.adam"
      ".map.Road\022$\n\010junction\030\003 \003(\0132\022.adam.map.J"
      "unctionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1495);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/map.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fmap_2eproto
namespace adam {
namespace map {

// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
const int Header::kNameFieldNumber;
const int Header::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:adam.map.Header)
}

void Header::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:adam.map.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Header.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Header.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->version(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Header.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string date = 5;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Header.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->version(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Header.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string date = 5;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Header.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string date = 5;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // float version = 3;
  if (this->version() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Geometry::InitAsDefaultInstance() {
  ::adam::map::_Geometry_default_instance_.line_ = const_cast< ::adam::map::Line*>(
      ::adam::map::Line::internal_default_instance());
  ::adam::map::_Geometry_default_instance_.arc_ = const_cast< ::adam::map::Arc*>(
      ::adam::map::Arc::internal_default_instance());
}
void Geometry::set_allocated_line(::adam::map::Line* line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_shape();
  if (line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line, submessage_arena);
    }
    set_has_line();
    shape_.line_ = line;
  }
  // @@protoc_insertion_point(field_set_allocated:adam.map.Geometry.line)
}
void Geometry::set_allocated_arc(::adam::map::Arc* arc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_shape();
  if (arc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      arc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arc, submessage_arena);
    }
    set_has_arc();
    shape_.arc_ = arc;
  }
  // @@protoc_insertion_point(field_set_allocated:adam.map.Geometry.arc)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geometry::kSFieldNumber;
const int Geometry::kXFieldNumber;
const int Geometry::kYFieldNumber;
const int Geometry::kHdgFieldNumber;
const int Geometry::kLengthFieldNumber;
const int Geometry::kLineFieldNumber;
const int Geometry::kArcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geometry::Geometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Geometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&s_)) + sizeof(length_));
  clear_has_shape();
  switch (from.shape_case()) {
    case kLine: {
      mutable_line()->::adam::map::Line::MergeFrom(from.line());
      break;
    }
    case kArc: {
      mutable_arc()->::adam::map::Arc::MergeFrom(from.arc());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.Geometry)
}

void Geometry::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&s_)) + sizeof(length_));
  clear_has_shape();
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:adam.map.Geometry)
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (has_shape()) {
    clear_shape();
  }
}

void Geometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Geometry::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geometry& Geometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Geometry.base);
  return *internal_default_instance();
}


void Geometry::clear_shape() {
// @@protoc_insertion_point(one_of_clear_start:adam.map.Geometry)
  switch (shape_case()) {
    case kLine: {
      delete shape_.line_;
      break;
    }
    case kArc: {
      delete shape_.arc_;
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SHAPE_NOT_SET;
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&s_)) + sizeof(length_));
  clear_shape();
  _internal_metadata_.Clear();
}

bool Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Geometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hdg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.Line line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.Arc arc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_arc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Geometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Geometry)
  return false;
#undef DO_
}

void Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // double hdg = 4;
  if (this->hdg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->hdg(), output);
  }

  // double length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // .adam.map.Line line = 6;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_line(), output);
  }

  // .adam.map.Arc arc = 7;
  if (has_arc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_arc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Geometry)
}

::google::protobuf::uint8* Geometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // double hdg = 4;
  if (this->hdg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->hdg(), target);
  }

  // double length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // .adam.map.Line line = 6;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_line(), deterministic, target);
  }

  // .adam.map.Arc arc = 7;
  if (has_arc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_arc(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Geometry)
  return target;
}

size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Geometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double s = 1;
  if (this->s() != 0) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double hdg = 4;
  if (this->hdg() != 0) {
    total_size += 1 + 8;
  }

  // double length = 5;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  switch (shape_case()) {
    // .adam.map.Line line = 6;
    case kLine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shape_.line_);
      break;
    }
    // .adam.map.Arc arc = 7;
    case kArc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shape_.arc_);
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Geometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Geometry)
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.hdg() != 0) {
    set_hdg(from.hdg());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  switch (from.shape_case()) {
    case kLine: {
      mutable_line()->::adam::map::Line::MergeFrom(from.line());
      break;
    }
    case kArc: {
      mutable_arc()->::adam::map::Arc::MergeFrom(from.arc());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
}

void Geometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  return true;
}

void Geometry::Swap(Geometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(hdg_, other->hdg_);
  swap(length_, other->length_);
  swap(shape_, other->shape_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Geometry::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Line::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Line.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adam.map.Line)
}

void Line::SharedCtor() {
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:adam.map.Line)
  SharedDtor();
}

void Line::SharedDtor() {
}

void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Line& Line::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Line.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Line)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Line)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Arc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Arc::kCurvatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Arc::Arc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Arc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Arc)
}
Arc::Arc(const Arc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  curvature_ = from.curvature_;
  // @@protoc_insertion_point(copy_constructor:adam.map.Arc)
}

void Arc::SharedCtor() {
  curvature_ = 0;
}

Arc::~Arc() {
  // @@protoc_insertion_point(destructor:adam.map.Arc)
  SharedDtor();
}

void Arc::SharedDtor() {
}

void Arc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Arc::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Arc& Arc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Arc.base);
  return *internal_default_instance();
}


void Arc::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curvature_ = 0;
  _internal_metadata_.Clear();
}

bool Arc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Arc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double curvature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Arc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Arc)
  return false;
#undef DO_
}

void Arc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double curvature = 1;
  if (this->curvature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->curvature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Arc)
}

::google::protobuf::uint8* Arc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double curvature = 1;
  if (this->curvature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->curvature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Arc)
  return target;
}

size_t Arc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Arc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double curvature = 1;
  if (this->curvature() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Arc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Arc)
  GOOGLE_DCHECK_NE(&from, this);
  const Arc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Arc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Arc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Arc)
    MergeFrom(*source);
  }
}

void Arc::MergeFrom(const Arc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Arc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curvature() != 0) {
    set_curvature(from.curvature());
  }
}

void Arc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arc::CopyFrom(const Arc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arc::IsInitialized() const {
  return true;
}

void Arc::Swap(Arc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Arc::InternalSwap(Arc* other) {
  using std::swap;
  swap(curvature_, other->curvature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Arc::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlainView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlainView::kGeometryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlainView::PlainView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_PlainView.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.PlainView)
}
PlainView::PlainView(const PlainView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      geometry_(from.geometry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adam.map.PlainView)
}

void PlainView::SharedCtor() {
}

PlainView::~PlainView() {
  // @@protoc_insertion_point(destructor:adam.map.PlainView)
  SharedDtor();
}

void PlainView::SharedDtor() {
}

void PlainView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlainView::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlainView& PlainView::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_PlainView.base);
  return *internal_default_instance();
}


void PlainView::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.PlainView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometry_.Clear();
  _internal_metadata_.Clear();
}

bool PlainView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.PlainView)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .adam.map.Geometry geometry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.PlainView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.PlainView)
  return false;
#undef DO_
}

void PlainView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.PlainView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adam.map.Geometry geometry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->geometry(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.PlainView)
}

::google::protobuf::uint8* PlainView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.PlainView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adam.map.Geometry geometry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometry_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->geometry(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.PlainView)
  return target;
}

size_t PlainView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.PlainView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .adam.map.Geometry geometry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geometry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geometry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.PlainView)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlainView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.PlainView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.PlainView)
    MergeFrom(*source);
  }
}

void PlainView::MergeFrom(const PlainView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.PlainView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geometry_.MergeFrom(from.geometry_);
}

void PlainView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.PlainView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainView::CopyFrom(const PlainView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.PlainView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainView::IsInitialized() const {
  return true;
}

void PlainView::Swap(PlainView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlainView::InternalSwap(PlainView* other) {
  using std::swap;
  CastToBase(&geometry_)->InternalSwap(CastToBase(&other->geometry_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlainView::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lanes::InitAsDefaultInstance() {
  ::adam::map::_Lanes_default_instance_._instance.get_mutable()->lane_section_ = const_cast< ::adam::map::LaneSection*>(
      ::adam::map::LaneSection::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lanes::kLaneSectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lanes::Lanes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Lanes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Lanes)
}
Lanes::Lanes(const Lanes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lane_section()) {
    lane_section_ = new ::adam::map::LaneSection(*from.lane_section_);
  } else {
    lane_section_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.Lanes)
}

void Lanes::SharedCtor() {
  lane_section_ = NULL;
}

Lanes::~Lanes() {
  // @@protoc_insertion_point(destructor:adam.map.Lanes)
  SharedDtor();
}

void Lanes::SharedDtor() {
  if (this != internal_default_instance()) delete lane_section_;
}

void Lanes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lanes::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lanes& Lanes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Lanes.base);
  return *internal_default_instance();
}


void Lanes::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Lanes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lane_section_ != NULL) {
    delete lane_section_;
  }
  lane_section_ = NULL;
  _internal_metadata_.Clear();
}

bool Lanes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Lanes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adam.map.LaneSection lane_section = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_section()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Lanes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Lanes)
  return false;
#undef DO_
}

void Lanes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Lanes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adam.map.LaneSection lane_section = 1;
  if (this->has_lane_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_lane_section(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Lanes)
}

::google::protobuf::uint8* Lanes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Lanes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adam.map.LaneSection lane_section = 1;
  if (this->has_lane_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_lane_section(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Lanes)
  return target;
}

size_t Lanes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Lanes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .adam.map.LaneSection lane_section = 1;
  if (this->has_lane_section()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_section_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lanes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Lanes)
  GOOGLE_DCHECK_NE(&from, this);
  const Lanes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lanes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Lanes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Lanes)
    MergeFrom(*source);
  }
}

void Lanes::MergeFrom(const Lanes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Lanes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lane_section()) {
    mutable_lane_section()->::adam::map::LaneSection::MergeFrom(from.lane_section());
  }
}

void Lanes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Lanes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lanes::CopyFrom(const Lanes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Lanes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lanes::IsInitialized() const {
  return true;
}

void Lanes::Swap(Lanes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lanes::InternalSwap(Lanes* other) {
  using std::swap;
  swap(lane_section_, other->lane_section_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lanes::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSet::kLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSet::LaneSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_LaneSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.LaneSet)
}
LaneSet::LaneSet(const LaneSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_(from.lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adam.map.LaneSet)
}

void LaneSet::SharedCtor() {
}

LaneSet::~LaneSet() {
  // @@protoc_insertion_point(destructor:adam.map.LaneSet)
  SharedDtor();
}

void LaneSet::SharedDtor() {
}

void LaneSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSet::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSet& LaneSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_LaneSet.base);
  return *internal_default_instance();
}


void LaneSet::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.LaneSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.LaneSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .adam.map.Lane lane = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.LaneSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.LaneSet)
  return false;
#undef DO_
}

void LaneSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.LaneSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adam.map.Lane lane = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lane(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.LaneSet)
}

::google::protobuf::uint8* LaneSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.LaneSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adam.map.Lane lane = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lane(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.LaneSet)
  return target;
}

size_t LaneSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.LaneSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .adam.map.Lane lane = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.LaneSet)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.LaneSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.LaneSet)
    MergeFrom(*source);
  }
}

void LaneSet::MergeFrom(const LaneSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.LaneSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_.MergeFrom(from.lane_);
}

void LaneSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.LaneSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSet::CopyFrom(const LaneSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.LaneSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSet::IsInitialized() const {
  return true;
}

void LaneSet::Swap(LaneSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSet::InternalSwap(LaneSet* other) {
  using std::swap;
  CastToBase(&lane_)->InternalSwap(CastToBase(&other->lane_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSet::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::adam::map::_Lane_default_instance_._instance.get_mutable()->width_ = const_cast< ::adam::map::LaneWidth*>(
      ::adam::map::LaneWidth::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIdFieldNumber;
const int Lane::kWidthFieldNumber;
const int Lane::kRoadMarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_mark_(from.road_mark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_width()) {
    width_ = new ::adam::map::LaneWidth(*from.width_);
  } else {
    width_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:adam.map.Lane)
}

void Lane::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&width_)) + sizeof(id_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:adam.map.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete width_;
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_mark_.Clear();
  if (GetArenaNoVirtual() == NULL && width_ != NULL) {
    delete width_;
  }
  width_ = NULL;
  id_ = 0;
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.LaneWidth width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_width()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adam.map.RoadMark road_mark = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_mark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .adam.map.LaneWidth width = 4;
  if (this->has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_width(), output);
  }

  // repeated .adam.map.RoadMark road_mark = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_mark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->road_mark(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .adam.map.LaneWidth width = 4;
  if (this->has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_width(), deterministic, target);
  }

  // repeated .adam.map.RoadMark road_mark = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_mark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->road_mark(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .adam.map.RoadMark road_mark = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->road_mark_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_mark(static_cast<int>(i)));
    }
  }

  // .adam.map.LaneWidth width = 4;
  if (this->has_width()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *width_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_mark_.MergeFrom(from.road_mark_);
  if (from.has_width()) {
    mutable_width()->::adam::map::LaneWidth::MergeFrom(from.width());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  CastToBase(&road_mark_)->InternalSwap(CastToBase(&other->road_mark_));
  swap(width_, other->width_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadMark::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadMark::kTypeFieldNumber;
const int RoadMark::kColorFieldNumber;
const int RoadMark::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadMark::RoadMark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_RoadMark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.RoadMark)
}
RoadMark::RoadMark(const RoadMark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.color().size() > 0) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:adam.map.RoadMark)
}

void RoadMark::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
}

RoadMark::~RoadMark() {
  // @@protoc_insertion_point(destructor:adam.map.RoadMark)
  SharedDtor();
}

void RoadMark::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoadMark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadMark::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadMark& RoadMark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_RoadMark.base);
  return *internal_default_instance();
}


void RoadMark::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.RoadMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  _internal_metadata_.Clear();
}

bool RoadMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.RoadMark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.RoadMark.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.RoadMark.color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.RoadMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.RoadMark)
  return false;
#undef DO_
}

void RoadMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.RoadMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadMark.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // string color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadMark.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->color(), output);
  }

  // double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.RoadMark)
}

::google::protobuf::uint8* RoadMark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.RoadMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadMark.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // string color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadMark.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  // double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.RoadMark)
  return target;
}

size_t RoadMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.RoadMark)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string color = 4;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadMark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.RoadMark)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadMark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.RoadMark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.RoadMark)
    MergeFrom(*source);
  }
}

void RoadMark::MergeFrom(const RoadMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.RoadMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
}

void RoadMark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.RoadMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMark::CopyFrom(const RoadMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.RoadMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMark::IsInitialized() const {
  return true;
}

void RoadMark::Swap(RoadMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadMark::InternalSwap(RoadMark* other) {
  using std::swap;
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadMark::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneWidth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneWidth::kSOffsetFieldNumber;
const int LaneWidth::kAFieldNumber;
const int LaneWidth::kBFieldNumber;
const int LaneWidth::kCFieldNumber;
const int LaneWidth::kDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneWidth::LaneWidth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_LaneWidth.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.LaneWidth)
}
LaneWidth::LaneWidth(const LaneWidth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_offset_, &from.s_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&s_offset_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:adam.map.LaneWidth)
}

void LaneWidth::SharedCtor() {
  ::memset(&s_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&s_offset_)) + sizeof(d_));
}

LaneWidth::~LaneWidth() {
  // @@protoc_insertion_point(destructor:adam.map.LaneWidth)
  SharedDtor();
}

void LaneWidth::SharedDtor() {
}

void LaneWidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneWidth::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneWidth& LaneWidth::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_LaneWidth.base);
  return *internal_default_instance();
}


void LaneWidth::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.LaneWidth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&s_offset_)) + sizeof(d_));
  _internal_metadata_.Clear();
}

bool LaneWidth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.LaneWidth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double s_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double c = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double d = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.LaneWidth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.LaneWidth)
  return false;
#undef DO_
}

void LaneWidth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.LaneWidth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s_offset = 1;
  if (this->s_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s_offset(), output);
  }

  // double a = 2;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->a(), output);
  }

  // double b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->b(), output);
  }

  // double c = 4;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c(), output);
  }

  // double d = 5;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->d(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.LaneWidth)
}

::google::protobuf::uint8* LaneWidth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.LaneWidth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s_offset = 1;
  if (this->s_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s_offset(), target);
  }

  // double a = 2;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->a(), target);
  }

  // double b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->b(), target);
  }

  // double c = 4;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c(), target);
  }

  // double d = 5;
  if (this->d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->d(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.LaneWidth)
  return target;
}

size_t LaneWidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.LaneWidth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double s_offset = 1;
  if (this->s_offset() != 0) {
    total_size += 1 + 8;
  }

  // double a = 2;
  if (this->a() != 0) {
    total_size += 1 + 8;
  }

  // double b = 3;
  if (this->b() != 0) {
    total_size += 1 + 8;
  }

  // double c = 4;
  if (this->c() != 0) {
    total_size += 1 + 8;
  }

  // double d = 5;
  if (this->d() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneWidth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.LaneWidth)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneWidth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneWidth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.LaneWidth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.LaneWidth)
    MergeFrom(*source);
  }
}

void LaneWidth::MergeFrom(const LaneWidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.LaneWidth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s_offset() != 0) {
    set_s_offset(from.s_offset());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
}

void LaneWidth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.LaneWidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneWidth::CopyFrom(const LaneWidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.LaneWidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneWidth::IsInitialized() const {
  return true;
}

void LaneWidth::Swap(LaneWidth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneWidth::InternalSwap(LaneWidth* other) {
  using std::swap;
  swap(s_offset_, other->s_offset_);
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  swap(d_, other->d_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneWidth::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSection::InitAsDefaultInstance() {
  ::adam::map::_LaneSection_default_instance_._instance.get_mutable()->left_ = const_cast< ::adam::map::LaneSet*>(
      ::adam::map::LaneSet::internal_default_instance());
  ::adam::map::_LaneSection_default_instance_._instance.get_mutable()->center_ = const_cast< ::adam::map::LaneSet*>(
      ::adam::map::LaneSet::internal_default_instance());
  ::adam::map::_LaneSection_default_instance_._instance.get_mutable()->right_ = const_cast< ::adam::map::LaneSet*>(
      ::adam::map::LaneSet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSection::kSFieldNumber;
const int LaneSection::kLeftFieldNumber;
const int LaneSection::kCenterFieldNumber;
const int LaneSection::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSection::LaneSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_LaneSection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.LaneSection)
}
LaneSection::LaneSection(const LaneSection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left()) {
    left_ = new ::adam::map::LaneSet(*from.left_);
  } else {
    left_ = NULL;
  }
  if (from.has_center()) {
    center_ = new ::adam::map::LaneSet(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::adam::map::LaneSet(*from.right_);
  } else {
    right_ = NULL;
  }
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:adam.map.LaneSection)
}

void LaneSection::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&left_)) + sizeof(s_));
}

LaneSection::~LaneSection() {
  // @@protoc_insertion_point(destructor:adam.map.LaneSection)
  SharedDtor();
}

void LaneSection::SharedDtor() {
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete right_;
}

void LaneSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSection::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSection& LaneSection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_LaneSection.base);
  return *internal_default_instance();
}


void LaneSection::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.LaneSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_ != NULL) {
    delete left_;
  }
  left_ = NULL;
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
  s_ = 0;
  _internal_metadata_.Clear();
}

bool LaneSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.LaneSection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.LaneSet left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.LaneSet center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.LaneSet right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.LaneSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.LaneSection)
  return false;
#undef DO_
}

void LaneSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.LaneSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // .adam.map.LaneSet left = 2;
  if (this->has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_left(), output);
  }

  // .adam.map.LaneSet center = 3;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_center(), output);
  }

  // .adam.map.LaneSet right = 4;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_right(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.LaneSection)
}

::google::protobuf::uint8* LaneSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.LaneSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // .adam.map.LaneSet left = 2;
  if (this->has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_left(), deterministic, target);
  }

  // .adam.map.LaneSet center = 3;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_center(), deterministic, target);
  }

  // .adam.map.LaneSet right = 4;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_right(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.LaneSection)
  return target;
}

size_t LaneSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.LaneSection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .adam.map.LaneSet left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .adam.map.LaneSet center = 3;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .adam.map.LaneSet right = 4;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // double s = 1;
  if (this->s() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.LaneSection)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.LaneSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.LaneSection)
    MergeFrom(*source);
  }
}

void LaneSection::MergeFrom(const LaneSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.LaneSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    mutable_left()->::adam::map::LaneSet::MergeFrom(from.left());
  }
  if (from.has_center()) {
    mutable_center()->::adam::map::LaneSet::MergeFrom(from.center());
  }
  if (from.has_right()) {
    mutable_right()->::adam::map::LaneSet::MergeFrom(from.right());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
}

void LaneSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.LaneSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSection::CopyFrom(const LaneSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.LaneSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSection::IsInitialized() const {
  return true;
}

void LaneSection::Swap(LaneSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSection::InternalSwap(LaneSection* other) {
  using std::swap;
  swap(left_, other->left_);
  swap(center_, other->center_);
  swap(right_, other->right_);
  swap(s_, other->s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSection::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Junction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Junction::kNameFieldNumber;
const int Junction::kIdFieldNumber;
const int Junction::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Junction::Junction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Junction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Junction)
}
Junction::Junction(const Junction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connection_(from.connection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.Junction)
}

void Junction::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Junction::~Junction() {
  // @@protoc_insertion_point(destructor:adam.map.Junction)
  SharedDtor();
}

void Junction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Junction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Junction::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Junction& Junction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Junction.base);
  return *internal_default_instance();
}


void Junction::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Junction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Junction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Junction.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Junction.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adam.map.Connection connection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Junction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Junction)
  return false;
#undef DO_
}

void Junction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Junction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Junction.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated .adam.map.Connection connection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->connection(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Junction)
}

::google::protobuf::uint8* Junction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Junction.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Junction.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated .adam.map.Connection connection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->connection(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Junction)
  return target;
}

size_t Junction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Junction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .adam.map.Connection connection = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->connection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connection(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Junction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  const Junction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Junction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Junction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Junction)
    MergeFrom(*source);
  }
}

void Junction::MergeFrom(const Junction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connection_.MergeFrom(from.connection_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void Junction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Junction::CopyFrom(const Junction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junction::IsInitialized() const {
  return true;
}

void Junction::Swap(Junction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Junction::InternalSwap(Junction* other) {
  using std::swap;
  CastToBase(&connection_)->InternalSwap(CastToBase(&other->connection_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Junction::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connection::kIdFieldNumber;
const int Connection::kIncomingRoadFieldNumber;
const int Connection::kConnectingRoadFieldNumber;
const int Connection::kContactPointFieldNumber;
const int Connection::kLaneLinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Connection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Connection)
}
Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_link_(from.lane_link_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  incoming_road_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.incoming_road().size() > 0) {
    incoming_road_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.incoming_road_);
  }
  connecting_road_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connecting_road().size() > 0) {
    connecting_road_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connecting_road_);
  }
  contact_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contact_point().size() > 0) {
    contact_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_point_);
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.Connection)
}

void Connection::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incoming_road_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connecting_road_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:adam.map.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incoming_road_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connecting_road_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_point_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connection& Connection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Connection.base);
  return *internal_default_instance();
}


void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_link_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incoming_road_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connecting_road_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Connection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Connection.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string incoming_road = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_incoming_road()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->incoming_road().data(), static_cast<int>(this->incoming_road().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Connection.incoming_road"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connecting_road = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connecting_road()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connecting_road().data(), static_cast<int>(this->connecting_road().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Connection.connecting_road"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contact_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_point()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contact_point().data(), static_cast<int>(this->contact_point().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Connection.contact_point"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adam.map.ConnectionLaneLink lane_link = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string incoming_road = 2;
  if (this->incoming_road().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->incoming_road().data(), static_cast<int>(this->incoming_road().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.incoming_road");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->incoming_road(), output);
  }

  // string connecting_road = 3;
  if (this->connecting_road().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connecting_road().data(), static_cast<int>(this->connecting_road().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.connecting_road");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->connecting_road(), output);
  }

  // string contact_point = 4;
  if (this->contact_point().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contact_point().data(), static_cast<int>(this->contact_point().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.contact_point");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contact_point(), output);
  }

  // repeated .adam.map.ConnectionLaneLink lane_link = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_link_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->lane_link(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string incoming_road = 2;
  if (this->incoming_road().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->incoming_road().data(), static_cast<int>(this->incoming_road().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.incoming_road");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->incoming_road(), target);
  }

  // string connecting_road = 3;
  if (this->connecting_road().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connecting_road().data(), static_cast<int>(this->connecting_road().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.connecting_road");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connecting_road(), target);
  }

  // string contact_point = 4;
  if (this->contact_point().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contact_point().data(), static_cast<int>(this->contact_point().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Connection.contact_point");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contact_point(), target);
  }

  // repeated .adam.map.ConnectionLaneLink lane_link = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_link_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->lane_link(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Connection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .adam.map.ConnectionLaneLink lane_link = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_link_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_link(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string incoming_road = 2;
  if (this->incoming_road().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->incoming_road());
  }

  // string connecting_road = 3;
  if (this->connecting_road().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connecting_road());
  }

  // string contact_point = 4;
  if (this->contact_point().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contact_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_link_.MergeFrom(from.lane_link_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.incoming_road().size() > 0) {

    incoming_road_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.incoming_road_);
  }
  if (from.connecting_road().size() > 0) {

    connecting_road_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connecting_road_);
  }
  if (from.contact_point().size() > 0) {

    contact_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_point_);
  }
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  using std::swap;
  CastToBase(&lane_link_)->InternalSwap(CastToBase(&other->lane_link_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  incoming_road_.Swap(&other->incoming_road_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  connecting_road_.Swap(&other->connecting_road_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contact_point_.Swap(&other->contact_point_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectionLaneLink::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionLaneLink::kFromFieldNumber;
const int ConnectionLaneLink::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionLaneLink::ConnectionLaneLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_ConnectionLaneLink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.ConnectionLaneLink)
}
ConnectionLaneLink::ConnectionLaneLink(const ConnectionLaneLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:adam.map.ConnectionLaneLink)
}

void ConnectionLaneLink::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

ConnectionLaneLink::~ConnectionLaneLink() {
  // @@protoc_insertion_point(destructor:adam.map.ConnectionLaneLink)
  SharedDtor();
}

void ConnectionLaneLink::SharedDtor() {
}

void ConnectionLaneLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConnectionLaneLink::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectionLaneLink& ConnectionLaneLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_ConnectionLaneLink.base);
  return *internal_default_instance();
}


void ConnectionLaneLink::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.ConnectionLaneLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear();
}

bool ConnectionLaneLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.ConnectionLaneLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.ConnectionLaneLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.ConnectionLaneLink)
  return false;
#undef DO_
}

void ConnectionLaneLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.ConnectionLaneLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from(), output);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.ConnectionLaneLink)
}

::google::protobuf::uint8* ConnectionLaneLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.ConnectionLaneLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.ConnectionLaneLink)
  return target;
}

size_t ConnectionLaneLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.ConnectionLaneLink)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionLaneLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.ConnectionLaneLink)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionLaneLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionLaneLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.ConnectionLaneLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.ConnectionLaneLink)
    MergeFrom(*source);
  }
}

void ConnectionLaneLink::MergeFrom(const ConnectionLaneLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.ConnectionLaneLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
}

void ConnectionLaneLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.ConnectionLaneLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionLaneLink::CopyFrom(const ConnectionLaneLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.ConnectionLaneLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLaneLink::IsInitialized() const {
  return true;
}

void ConnectionLaneLink::Swap(ConnectionLaneLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionLaneLink::InternalSwap(ConnectionLaneLink* other) {
  using std::swap;
  swap(from_, other->from_);
  swap(to_, other->to_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConnectionLaneLink::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadLink::InitAsDefaultInstance() {
  ::adam::map::_RoadLink_default_instance_._instance.get_mutable()->predecessor_ = const_cast< ::adam::map::RoadLinker*>(
      ::adam::map::RoadLinker::internal_default_instance());
  ::adam::map::_RoadLink_default_instance_._instance.get_mutable()->successor_ = const_cast< ::adam::map::RoadLinker*>(
      ::adam::map::RoadLinker::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadLink::kPredecessorFieldNumber;
const int RoadLink::kSuccessorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadLink::RoadLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_RoadLink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.RoadLink)
}
RoadLink::RoadLink(const RoadLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_predecessor()) {
    predecessor_ = new ::adam::map::RoadLinker(*from.predecessor_);
  } else {
    predecessor_ = NULL;
  }
  if (from.has_successor()) {
    successor_ = new ::adam::map::RoadLinker(*from.successor_);
  } else {
    successor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.RoadLink)
}

void RoadLink::SharedCtor() {
  ::memset(&predecessor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&successor_) -
      reinterpret_cast<char*>(&predecessor_)) + sizeof(successor_));
}

RoadLink::~RoadLink() {
  // @@protoc_insertion_point(destructor:adam.map.RoadLink)
  SharedDtor();
}

void RoadLink::SharedDtor() {
  if (this != internal_default_instance()) delete predecessor_;
  if (this != internal_default_instance()) delete successor_;
}

void RoadLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadLink::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadLink& RoadLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_RoadLink.base);
  return *internal_default_instance();
}


void RoadLink::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.RoadLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && predecessor_ != NULL) {
    delete predecessor_;
  }
  predecessor_ = NULL;
  if (GetArenaNoVirtual() == NULL && successor_ != NULL) {
    delete successor_;
  }
  successor_ = NULL;
  _internal_metadata_.Clear();
}

bool RoadLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.RoadLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adam.map.RoadLinker predecessor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_predecessor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.RoadLinker successor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_successor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.RoadLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.RoadLink)
  return false;
#undef DO_
}

void RoadLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.RoadLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adam.map.RoadLinker predecessor = 1;
  if (this->has_predecessor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_predecessor(), output);
  }

  // .adam.map.RoadLinker successor = 2;
  if (this->has_successor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_successor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.RoadLink)
}

::google::protobuf::uint8* RoadLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.RoadLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adam.map.RoadLinker predecessor = 1;
  if (this->has_predecessor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_predecessor(), deterministic, target);
  }

  // .adam.map.RoadLinker successor = 2;
  if (this->has_successor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_successor(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.RoadLink)
  return target;
}

size_t RoadLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.RoadLink)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .adam.map.RoadLinker predecessor = 1;
  if (this->has_predecessor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *predecessor_);
  }

  // .adam.map.RoadLinker successor = 2;
  if (this->has_successor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *successor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.RoadLink)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.RoadLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.RoadLink)
    MergeFrom(*source);
  }
}

void RoadLink::MergeFrom(const RoadLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.RoadLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_predecessor()) {
    mutable_predecessor()->::adam::map::RoadLinker::MergeFrom(from.predecessor());
  }
  if (from.has_successor()) {
    mutable_successor()->::adam::map::RoadLinker::MergeFrom(from.successor());
  }
}

void RoadLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.RoadLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadLink::CopyFrom(const RoadLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.RoadLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadLink::IsInitialized() const {
  return true;
}

void RoadLink::Swap(RoadLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadLink::InternalSwap(RoadLink* other) {
  using std::swap;
  swap(predecessor_, other->predecessor_);
  swap(successor_, other->successor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadLink::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadLinker::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadLinker::kElementTypeFieldNumber;
const int RoadLinker::kElementIdFieldNumber;
const int RoadLinker::kContactPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadLinker::RoadLinker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_RoadLinker.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.RoadLinker)
}
RoadLinker::RoadLinker(const RoadLinker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  element_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.element_type().size() > 0) {
    element_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_type_);
  }
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.element_id().size() > 0) {
    element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
  }
  contact_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contact_point().size() > 0) {
    contact_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_point_);
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.RoadLinker)
}

void RoadLinker::SharedCtor() {
  element_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoadLinker::~RoadLinker() {
  // @@protoc_insertion_point(destructor:adam.map.RoadLinker)
  SharedDtor();
}

void RoadLinker::SharedDtor() {
  element_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  element_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_point_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoadLinker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadLinker::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadLinker& RoadLinker::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_RoadLinker.base);
  return *internal_default_instance();
}


void RoadLinker::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.RoadLinker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  element_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RoadLinker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.RoadLinker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string element_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->element_type().data(), static_cast<int>(this->element_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.RoadLinker.element_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string element_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->element_id().data(), static_cast<int>(this->element_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.RoadLinker.element_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contact_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_point()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contact_point().data(), static_cast<int>(this->contact_point().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.RoadLinker.contact_point"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.RoadLinker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.RoadLinker)
  return false;
#undef DO_
}

void RoadLinker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.RoadLinker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string element_type = 1;
  if (this->element_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->element_type().data(), static_cast<int>(this->element_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadLinker.element_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->element_type(), output);
  }

  // string element_id = 2;
  if (this->element_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->element_id().data(), static_cast<int>(this->element_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadLinker.element_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->element_id(), output);
  }

  // string contact_point = 3;
  if (this->contact_point().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contact_point().data(), static_cast<int>(this->contact_point().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadLinker.contact_point");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->contact_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.RoadLinker)
}

::google::protobuf::uint8* RoadLinker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.RoadLinker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string element_type = 1;
  if (this->element_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->element_type().data(), static_cast<int>(this->element_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadLinker.element_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->element_type(), target);
  }

  // string element_id = 2;
  if (this->element_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->element_id().data(), static_cast<int>(this->element_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadLinker.element_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->element_id(), target);
  }

  // string contact_point = 3;
  if (this->contact_point().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contact_point().data(), static_cast<int>(this->contact_point().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.RoadLinker.contact_point");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contact_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.RoadLinker)
  return target;
}

size_t RoadLinker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.RoadLinker)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string element_type = 1;
  if (this->element_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->element_type());
  }

  // string element_id = 2;
  if (this->element_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->element_id());
  }

  // string contact_point = 3;
  if (this->contact_point().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contact_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadLinker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.RoadLinker)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadLinker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadLinker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.RoadLinker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.RoadLinker)
    MergeFrom(*source);
  }
}

void RoadLinker::MergeFrom(const RoadLinker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.RoadLinker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.element_type().size() > 0) {

    element_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_type_);
  }
  if (from.element_id().size() > 0) {

    element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
  }
  if (from.contact_point().size() > 0) {

    contact_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_point_);
  }
}

void RoadLinker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.RoadLinker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadLinker::CopyFrom(const RoadLinker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.RoadLinker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadLinker::IsInitialized() const {
  return true;
}

void RoadLinker::Swap(RoadLinker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadLinker::InternalSwap(RoadLinker* other) {
  using std::swap;
  element_type_.Swap(&other->element_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  element_id_.Swap(&other->element_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contact_point_.Swap(&other->contact_point_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadLinker::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Road::InitAsDefaultInstance() {
  ::adam::map::_Road_default_instance_._instance.get_mutable()->link_ = const_cast< ::adam::map::RoadLink*>(
      ::adam::map::RoadLink::internal_default_instance());
  ::adam::map::_Road_default_instance_._instance.get_mutable()->plain_view_ = const_cast< ::adam::map::PlainView*>(
      ::adam::map::PlainView::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kNameFieldNumber;
const int Road::kIdFieldNumber;
const int Road::kLinkFieldNumber;
const int Road::kPlainViewFieldNumber;
const int Road::kLanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Road.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Road)
}
Road::Road(const Road& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_link()) {
    link_ = new ::adam::map::RoadLink(*from.link_);
  } else {
    link_ = NULL;
  }
  if (from.has_plain_view()) {
    plain_view_ = new ::adam::map::PlainView(*from.plain_view_);
  } else {
    plain_view_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.Road)
}

void Road::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plain_view_) -
      reinterpret_cast<char*>(&link_)) + sizeof(plain_view_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:adam.map.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete plain_view_;
}

void Road::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Road& Road::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Road.base);
  return *internal_default_instance();
}


void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && link_ != NULL) {
    delete link_;
  }
  link_ = NULL;
  if (GetArenaNoVirtual() == NULL && plain_view_ != NULL) {
    delete plain_view_;
  }
  plain_view_ = NULL;
  _internal_metadata_.Clear();
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Road)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Road.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.Road.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.RoadLink link = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adam.map.PlainView plain_view = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plain_view()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adam.map.Lanes lanes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Road.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Road.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // .adam.map.RoadLink link = 5;
  if (this->has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_link(), output);
  }

  // .adam.map.PlainView plain_view = 6;
  if (this->has_plain_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_plain_view(), output);
  }

  // repeated .adam.map.Lanes lanes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->lanes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Road.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.Road.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // .adam.map.RoadLink link = 5;
  if (this->has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_link(), deterministic, target);
  }

  // .adam.map.PlainView plain_view = 6;
  if (this->has_plain_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_plain_view(), deterministic, target);
  }

  // repeated .adam.map.Lanes lanes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->lanes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Road)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .adam.map.Lanes lanes = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lanes(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .adam.map.RoadLink link = 5;
  if (this->has_link()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .adam.map.PlainView plain_view = 6;
  if (this->has_plain_view()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plain_view_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_link()) {
    mutable_link()->::adam::map::RoadLink::MergeFrom(from.link());
  }
  if (from.has_plain_view()) {
    mutable_plain_view()->::adam::map::PlainView::MergeFrom(from.plain_view());
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  using std::swap;
  CastToBase(&lanes_)->InternalSwap(CastToBase(&other->lanes_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(link_, other->link_);
  swap(plain_view_, other->plain_view_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void A::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

A::A()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_A.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.A)
}
A::A(const A& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adam.map.A)
}

void A::SharedCtor() {
}

A::~A() {
  // @@protoc_insertion_point(destructor:adam.map.A)
  SharedDtor();
}

void A::SharedDtor() {
}

void A::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* A::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const A& A::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_A.base);
  return *internal_default_instance();
}


void A::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool A::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.A)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.A)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.A)
  return false;
#undef DO_
}

void A::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.A)
}

::google::protobuf::uint8* A::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.A)
  return target;
}

size_t A::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.A)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void A::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.A)
  GOOGLE_DCHECK_NE(&from, this);
  const A* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const A>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.A)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.A)
    MergeFrom(*source);
  }
}

void A::MergeFrom(const A& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.A)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void A::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A::CopyFrom(const A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A::IsInitialized() const {
  return true;
}

void A::Swap(A* other) {
  if (other == this) return;
  InternalSwap(other);
}
void A::InternalSwap(A* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata A::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void B::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int B::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

B::B()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_B.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.B)
}
B::B(const B& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.B)
}

void B::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

B::~B() {
  // @@protoc_insertion_point(destructor:adam.map.B)
  SharedDtor();
}

void B::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void B::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* B::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const B& B::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_B.base);
  return *internal_default_instance();
}


void B::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.B)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "adam.map.B.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.B)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.B)
  return false;
#undef DO_
}

void B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.B.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.B)
}

::google::protobuf::uint8* B::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "adam.map.B.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.B)
  return target;
}

size_t B::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.B)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void B::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.B)
  GOOGLE_DCHECK_NE(&from, this);
  const B* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const B>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.B)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.B)
    MergeFrom(*source);
  }
}

void B::MergeFrom(const B& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.B)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void B::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void B::CopyFrom(const B& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool B::IsInitialized() const {
  return true;
}

void B::Swap(B* other) {
  if (other == this) return;
  InternalSwap(other);
}
void B::InternalSwap(B* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata B::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Map::InitAsDefaultInstance() {
  ::adam::map::_Map_default_instance_._instance.get_mutable()->header_ = const_cast< ::adam::map::Header*>(
      ::adam::map::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map::kHeaderFieldNumber;
const int Map::kRoadFieldNumber;
const int Map::kJunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map::Map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fmap_2eproto::scc_info_Map.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:adam.map.Map)
}
Map::Map(const Map& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_(from.road_),
      junction_(from.junction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::adam::map::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:adam.map.Map)
}

void Map::SharedCtor() {
  header_ = NULL;
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:adam.map.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  ::protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Map& Map::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fmap_2eproto::scc_info_Map.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:adam.map.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_.Clear();
  junction_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adam.map.Map)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adam.map.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adam.map.Road road = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adam.map.Junction junction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_junction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adam.map.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adam.map.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adam.map.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adam.map.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .adam.map.Road road = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->road(static_cast<int>(i)),
      output);
  }

  // repeated .adam.map.Junction junction = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junction_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->junction(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:adam.map.Map)
}

::google::protobuf::uint8* Map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adam.map.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adam.map.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .adam.map.Road road = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->road(static_cast<int>(i)), deterministic, target);
  }

  // repeated .adam.map.Junction junction = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junction_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->junction(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adam.map.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adam.map.Map)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .adam.map.Road road = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->road_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road(static_cast<int>(i)));
    }
  }

  // repeated .adam.map.Junction junction = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->junction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->junction(static_cast<int>(i)));
    }
  }

  // .adam.map.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adam.map.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adam.map.Map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adam.map.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adam.map.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_.MergeFrom(from.road_);
  junction_.MergeFrom(from.junction_);
  if (from.has_header()) {
    mutable_header()->::adam::map::Header::MergeFrom(from.header());
  }
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adam.map.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adam.map.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::Swap(Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map::InternalSwap(Map* other) {
  using std::swap;
  CastToBase(&road_)->InternalSwap(CastToBase(&other->road_));
  CastToBase(&junction_)->InternalSwap(CastToBase(&other->junction_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_proto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace adam
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Header* Arena::CreateMaybeMessage< ::adam::map::Header >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Geometry* Arena::CreateMaybeMessage< ::adam::map::Geometry >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Geometry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Line* Arena::CreateMaybeMessage< ::adam::map::Line >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Line >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Arc* Arena::CreateMaybeMessage< ::adam::map::Arc >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Arc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::PlainView* Arena::CreateMaybeMessage< ::adam::map::PlainView >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::PlainView >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Lanes* Arena::CreateMaybeMessage< ::adam::map::Lanes >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Lanes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::LaneSet* Arena::CreateMaybeMessage< ::adam::map::LaneSet >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::LaneSet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Lane* Arena::CreateMaybeMessage< ::adam::map::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Lane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::RoadMark* Arena::CreateMaybeMessage< ::adam::map::RoadMark >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::RoadMark >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::LaneWidth* Arena::CreateMaybeMessage< ::adam::map::LaneWidth >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::LaneWidth >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::LaneSection* Arena::CreateMaybeMessage< ::adam::map::LaneSection >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::LaneSection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Junction* Arena::CreateMaybeMessage< ::adam::map::Junction >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Junction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Connection* Arena::CreateMaybeMessage< ::adam::map::Connection >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Connection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::ConnectionLaneLink* Arena::CreateMaybeMessage< ::adam::map::ConnectionLaneLink >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::ConnectionLaneLink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::RoadLink* Arena::CreateMaybeMessage< ::adam::map::RoadLink >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::RoadLink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::RoadLinker* Arena::CreateMaybeMessage< ::adam::map::RoadLinker >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::RoadLinker >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Road* Arena::CreateMaybeMessage< ::adam::map::Road >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Road >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::A* Arena::CreateMaybeMessage< ::adam::map::A >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::A >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::B* Arena::CreateMaybeMessage< ::adam::map::B >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::B >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::adam::map::Map* Arena::CreateMaybeMessage< ::adam::map::Map >(Arena* arena) {
  return Arena::CreateInternal< ::adam::map::Map >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
